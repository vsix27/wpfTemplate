<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:helpers="clr-namespace:Vsix.Viewer.Helpers">
    <FontFamily x:Key="PlannerFont" >../Resources/#Planer</FontFamily>

    <Style x:Key="TreeExpanded" TargetType="{x:Type TreeViewItem}">
        <Setter Property="IsExpanded" Value="{Binding IsNodeExpanded}"/>
        <!-- Add this into your TreeView.ContainerStyle to remove the default blue background.
        <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Transparent" />
        <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="Transparent" />
        <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="Black" />
        <SolidColorBrush x:Key="{x:Static SystemColors.ControlTextBrushKey}" Color="Black" />
-->
    </Style>
<!--
    <Style x:Key="TreeItemContainerStyle" TargetType="{x:Type ItemContainerStyle}">

        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Transparent" />
        <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="Transparent" />
        <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="Black" />
        <SolidColorBrush x:Key="{x:Static SystemColors.ControlTextBrushKey}" Color="Black" />
       
        </Setter.Value> </Setter>
    </Style>
    -->
    <Style x:Key="CommentedSolidColorBrush" TargetType="{x:Type TreeView}">

        <!-- Add this into your TreeView.ContainerStyle to remove the default blue background.
        <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Transparent" />
        <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="Transparent" />
        <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="Black" />
        <SolidColorBrush x:Key="{x:Static SystemColors.ControlTextBrushKey}" Color="Black" />
        -->
    </Style>

    <Style x:Key="TreeExpandedExplorerStyle" TargetType="{x:Type TreeViewItem}">

        <!-- Style for the selected item -->
        <Setter Property="BorderThickness" Value="1"/>
        <Style.Triggers>
            <!-- Selected and has focus -->
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="BorderBrush" Value="#7DA2CE"/>
            </Trigger>
            <!-- Mouse over -->
            <Trigger Property="helpers:TreeViewHelper.IsMouseDirectlyOverItem" Value="True">
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                            <GradientStop Color="#FFFAFBFD" Offset="0"/>
                            <GradientStop Color="#FFEBF3FD" Offset="1"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
                <Setter Property="BorderBrush" Value="#B8D6FB"/>
            </Trigger>
            <!-- Selected but does not have the focus -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="True"/>
                    <Condition Property="IsSelectionActive" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="#D9D9D9"/>
            </MultiTrigger>
        </Style.Triggers>
        <Style.Resources>
            <Style TargetType="Border">
                <Setter Property="CornerRadius" Value="2"/>
            </Style>
        </Style.Resources>
    </Style>

    
    <Style x:Key="TreeColored" TargetType="{x:Type TreeViewItem}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=BoolProp}" Value="False">
                <Setter Property="Foreground" Value="LightGreen"></Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=BoolProp}" Value="True">
                <Setter Property="Foreground" Value="Cyan"></Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>